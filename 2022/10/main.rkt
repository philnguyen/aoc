#lang typed/racket

(require bnf
         unreachable
         "../../utils.rkt")

(define test (list
              "addx 15"
              "addx -11"
              "addx 6"
              "addx -3"
              "addx 5"
              "addx -1"
              "addx -8"
              "addx 13"
              "addx 4"
              "noop"
              "addx -1"
              "addx 5"
              "addx -1"
              "addx 5"
              "addx -1"
              "addx 5"
              "addx -1"
              "addx 5"
              "addx -1"
              "addx -35"
              "addx 1"
              "addx 24"
              "addx -19"
              "addx 1"
              "addx 16"
              "addx -11"
              "noop"
              "noop"
              "addx 21"
              "addx -15"
              "noop"
              "noop"
              "addx -3"
              "addx 9"
              "addx 1"
              "addx -3"
              "addx 8"
              "addx 1"
              "addx 5"
              "noop"
              "noop"
              "noop"
              "noop"
              "noop"
              "addx -36"
              "noop"
              "addx 1"
              "addx 7"
              "noop"
              "noop"
              "noop"
              "addx 2"
              "addx 6"
              "noop"
              "noop"
              "noop"
              "noop"
              "noop"
              "addx 1"
              "noop"
              "noop"
              "addx 7"
              "addx 1"
              "noop"
              "addx -13"
              "addx 13"
              "addx 7"
              "noop"
              "addx 1"
              "addx -33"
              "noop"
              "noop"
              "noop"
              "addx 2"
              "noop"
              "noop"
              "noop"
              "addx 8"
              "noop"
              "addx -1"
              "addx 2"
              "addx 1"
              "noop"
              "addx 17"
              "addx -9"
              "addx 1"
              "addx 1"
              "addx -3"
              "addx 11"
              "noop"
              "noop"
              "addx 1"
              "noop"
              "addx 1"
              "noop"
              "noop"
              "addx -13"
              "addx -19"
              "addx 1"
              "addx 3"
              "addx 26"
              "addx -30"
              "addx 12"
              "addx -1"
              "addx 3"
              "addx 1"
              "noop"
              "noop"
              "noop"
              "addx -9"
              "addx 18"
              "addx 1"
              "addx 2"
              "noop"
              "noop"
              "addx 9"
              "noop"
              "noop"
              "noop"
              "addx -1"
              "addx 2"
              "addx -37"
              "addx 1"
              "addx 3"
              "noop"
              "addx 15"
              "addx -21"
              "addx 22"
              "addx -6"
              "addx 1"
              "noop"
              "addx 2"
              "addx 1"
              "noop"
              "addx -10"
              "noop"
              "noop"
              "addx 20"
              "addx 1"
              "addx 2"
              "addx 2"
              "addx -6"
              "addx -11"
              "noop"
              "noop"
              "noop"
              ))

(define (compute)
  (reverse
   (for/fold ([states : (Listof Integer) (list 1)])
             ([l (in-input)])
     (match-define (cons v _) states)
     (match (string-split l)
       [(list "noop") (cons v states)]
       [(list "addx" (app string->number (? exact-integer? n)))
        (list* (+ v n) v states)]))))

(define (q1)
  (define states (compute))
  (define (comp [i : Integer]) (* i (list-ref states (sub1 i))))
  (apply + (map comp '(20 60 100 140 180 220))))

(define (q2)
  (for ([(v i) (in-indexed (compute))])
    (when (= (remainder i 40) 0)
      (printf "~n"))
    (printf "~a" (if (member (remainder i 40) (list (sub1 v) v (add1 v)))
                     "#"
                     "."))))

(module+ main
  (displayln (q1))
  (q2))
