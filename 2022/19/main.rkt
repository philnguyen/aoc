#lang typed/racket

(require bnf)

(State . ::= . (State [robots : Robot-Count] [resources : Resources]))
(Resource . ::= . 'ore 'clay 'obsidian 'geode)
(Resources . ≜ . (HashTable Resource Integer))
(Robot-Count . ≜ . (HashTable Resource Integer))
(Blue-Print . ≜ . (HashTable Resource Resources))

(define test-input : (HashTable Integer Blue-Print)
  (hasheq 1 (hasheq 'ore (hasheq 'ore 4)
                    'clay (hasheq 'ore 2)
                    'obsidian (hasheq 'ore 3 'clay 14)
                    'geode (hasheq 'ore 2 'obsidian 7))
          2 (hasheq 'ore (hasheq 'ore 2)
                    'clay (hasheq 'ore 3)
                    'obsidian (hasheq 'ore 3 'clay 8)
                    'geode (hasheq 'ore 3 'obsidian 12))))

(define real-input : (HashTable Integer Blue-Print)
  (hasheq 1 (hasheq 'ore (hasheq 'ore 3)
                    'clay (hasheq 'ore 3)
                    'obsidian (hasheq 'ore 3 'clay 16)
                    'geode (hasheq 'ore 3 'obsidian 9))
          2 (hasheq 'ore (hasheq 'ore 3)
                    'clay (hasheq 'ore 3)
                    'obsidian (hasheq 'ore 3 'clay 19)
                    'geode (hasheq 'ore 3 'obsidian 19))
          3 (hasheq 'ore (hasheq 'ore 4)
                    'clay (hasheq 'ore 4)
                    'obsidian (hasheq 'ore 2 'clay 14)
                    'geode (hasheq 'ore 4 'obsidian 19))
          4 (hasheq 'ore (hasheq 'ore 4)
                    'clay (hasheq 'ore 4)
                    'obsidian (hasheq 'ore 3 'clay 14)
                    'geode (hasheq 'ore 3 'obsidian 8))
          5 (hasheq 'ore (hasheq 'ore 2)
                    'clay (hasheq 'ore 4)
                    'obsidian (hasheq 'ore 3 'clay 14)
                    'geode (hasheq 'ore 4 'obsidian 9))
          6 (hasheq 'ore (hasheq 'ore 4)
                    'clay (hasheq 'ore 4)
                    'obsidian (hasheq 'ore 3 'clay 7)
                    'geode (hasheq 'ore 3 'obsidian 20))
          7 (hasheq 'ore (hasheq 'ore 2)
                    'clay (hasheq 'ore 4)
                    'obsidian (hasheq 'ore 4 'clay 19)
                    'geode (hasheq 'ore 2 'obsidian 18))
          8 (hasheq 'ore (hasheq 'ore 2)
                    'clay (hasheq 'ore 3)
                    'obsidian (hasheq 'ore 2 'clay 17)
                    'geode (hasheq 'ore 3 'obsidian 19))
          9 (hasheq 'ore (hasheq 'ore 3)
                    'clay (hasheq 'ore 4)
                    'obsidian (hasheq 'ore 3 'clay 19)
                    'geode (hasheq 'ore 3 'obsidian 8))
          10 (hasheq 'ore (hasheq 'ore 4)
                     'clay (hasheq 'ore 3)
                     'obsidian (hasheq 'ore 2 'clay 14)
                     'geode (hasheq 'ore 4 'obsidian 11))
          11 (hasheq 'ore (hasheq 'ore 2)
                     'clay (hasheq 'ore 2)
                     'obsidian (hasheq 'ore 2 'clay 15)
                     'geode (hasheq 'ore 2 'obsidian 7))
          12 (hasheq 'ore (hasheq 'ore 2)
                     'clay (hasheq 'ore 4)
                     'obsidian (hasheq 'ore 3 'clay 19)
                     'geode (hasheq 'ore 4 'obsidian 8))
          13 (hasheq 'ore (hasheq 'ore 2)
                     'clay (hasheq 'ore 3)
                     'obsidian (hasheq 'ore 2 'clay 16)
                     'geode (hasheq 'ore 2 'obsidian 9))
          14 (hasheq 'ore (hasheq 'ore 4)
                     'clay (hasheq 'ore 4)
                     'obsidian (hasheq 'ore 2 'clay 15)
                     'geode (hasheq 'ore 3 'obsidian 16))
          15 (hasheq 'ore (hasheq 'ore 4)
                     'clay (hasheq 'ore 3)
                     'obsidian (hasheq 'ore 2 'clay 20)
                     'geode (hasheq 'ore 2 'obsidian 9))
          16 (hasheq 'ore (hasheq 'ore 2)
                     'clay (hasheq 'ore 3)
                     'obsidian (hasheq 'ore 3 'clay 14)
                     'geode (hasheq 'ore 3 'obsidian 19))
          17 (hasheq 'ore (hasheq 'ore 4)
                     'clay (hasheq 'ore 4)
                     'obsidian (hasheq 'ore 2 'clay 9)
                     'geode (hasheq 'ore 3 'obsidian 15))
          18 (hasheq 'ore (hasheq 'ore 3)
                     'clay (hasheq 'ore 4)
                     'obsidian (hasheq 'ore 4 'clay 6)
                     'geode (hasheq 'ore 2 'obsidian 20))
          19 (hasheq 'ore (hasheq 'ore 4)
                     'clay (hasheq 'ore 4)
                     'obsidian (hasheq 'ore 4 'clay 15)
                     'geode (hasheq 'ore 4 'obsidian 20))
          20 (hasheq 'ore (hasheq 'ore 4)
                     'clay (hasheq 'ore 4)
                     'obsidian (hasheq 'ore 2 'clay 11)
                     'geode (hasheq 'ore 3 'obsidian 14))
          21 (hasheq 'ore (hasheq 'ore 3)
                     'clay (hasheq 'ore 4)
                     'obsidian (hasheq 'ore 4 'clay 19)
                     'geode (hasheq 'ore 4 'obsidian 11))
          22 (hasheq 'ore (hasheq 'ore 3)
                     'clay (hasheq 'ore 4)
                     'obsidian (hasheq 'ore 2 'clay 20)
                     'geode (hasheq 'ore 4 'obsidian 7))
          23 (hasheq 'ore (hasheq 'ore 4)
                     'clay (hasheq 'ore 4)
                     'obsidian (hasheq 'ore 4 'clay 9)
                     'geode (hasheq 'ore 2 'obsidian 20))
          24 (hasheq 'ore (hasheq 'ore 2)
                     'clay (hasheq 'ore 2)
                     'obsidian (hasheq 'ore 2 'clay 17)
                     'geode (hasheq 'ore 2 'obsidian 10))
          25 (hasheq 'ore (hasheq 'ore 2)
                     'clay (hasheq 'ore 4)
                     'obsidian (hasheq 'ore 4 'clay 16)
                     'geode (hasheq 'ore 3 'obsidian 13))
          26 (hasheq 'ore (hasheq 'ore 3)
                     'clay (hasheq 'ore 4)
                     'obsidian (hasheq 'ore 4 'clay 14)
                     'geode (hasheq 'ore 4 'obsidian 10))
          27 (hasheq 'ore (hasheq 'ore 3)
                     'clay (hasheq 'ore 3)
                     'obsidian (hasheq 'ore 3 'clay 20)
                     'geode (hasheq 'ore 2 'obsidian 12))
          28 (hasheq 'ore (hasheq 'ore 3)
                     'clay (hasheq 'ore 4)
                     'obsidian (hasheq 'ore 4 'clay 18)
                     'geode (hasheq 'ore 2 'obsidian 11))
          29 (hasheq 'ore (hasheq 'ore 4)
                     'clay (hasheq 'ore 4)
                     'obsidian (hasheq 'ore 3 'clay 5)
                     'geode (hasheq 'ore 4 'obsidian 11))
          30 (hasheq 'ore (hasheq 'ore 2)
                     'clay (hasheq 'ore 4)
                     'obsidian (hasheq 'ore 3 'clay 20)
                     'geode (hasheq 'ore 2 'obsidian 17))
          ))

(: resource-count : Resources Resource → Integer)
(define (resource-count reses r) (hash-ref reses r (λ () 0)))

(: buy : Blue-Print Resource State → State)
(define (buy bp r s)
  (match-define (State robots reses) s)
  (State (count-up robots r 1) (resource-subtract reses (hash-ref bp r))))

(: next-resources : Resource → (Listof Resource))
(define (next-resources r)
  (cond [(member r '(ore clay obsidian geode)) => cdr]
        [else '()]))

(: can-buy? : Blue-Print Resource State → Boolean)
(define (can-buy? bp r s) (resources≤? (hash-ref bp r) (State-resources s)))

(: best-decision : Blue-Print State → (Listof State))
(define (best-decision bp s)

  (match-define (State robots resources) s)

  (define (buys)
    (for/list : (Listof Resource) ([r (in-list '(ore clay obsidian geode))]
                                   #:when (can-buy? bp r s)
                                   #:unless (and (not (equal? r 'geode))
                                                 (> (resource-count robots r)
                                                    (apply max (for/list : (Listof Integer) ([(_ cost) (in-hash bp)])
                                                                 (resource-count cost r))))))
      r))

  (let ([considered-buyings (let ([bs (buys)])
                              (cond [(member 'geode bs) '(geode)]
                                    [(member 'obsidian bs) '(obsidian)]
                                    [else bs]))])
    (define buyings
      (for/list : (Listof State) ([r (in-list considered-buyings)])
        (buy bp r s)))
    (define consider-holding?
      (or (null? buyings)
          (for/or : Boolean ([r (in-list considered-buyings)])
            (define r-cost (hash-ref bp r))
            (for/or : Boolean ([r* (in-list (next-resources r))])
              (define r*-cost (hash-ref bp r*))
              (for/or : Boolean ([(rᵢ cᵢ) (in-hash r-cost)])
                (> (resource-count r*-cost rᵢ)
                   (- (resource-count resources rᵢ) cᵢ)))))))
    (if consider-holding? (cons s buyings) buyings)))

(: step : Blue-Print State → (Listof State))
(define (step bp s)
  (match-define (State robots resources) s)
  (map
   (λ (s)
     (match-define (State robots* resources*) s)
     (State robots* (resource-add resources* robots)))
   (best-decision bp s)))

(: count-up : Robot-Count Resource Integer → Robot-Count)
(define (count-up counts res δ)
  (hash-update counts res (λ ([n : Integer]) (+ n δ)) (λ () 0)))

(: resources≤? : Resources Resources → Boolean)
(define (resources≤? reses₁ reses₂)
  (for/and : Boolean ([(r n) (in-hash reses₁)])
    (<= n (resource-count reses₂ r))))

(: resource-add : Resources Resources → Resources)
(define (resource-add reses₁ reses₂)
  (for/fold ([reses : Resources reses₁]) ([(r n) (in-hash reses₂)])
    (count-up reses r n)))

(: resource-subtract : Resources Resources → Resources)
(define (resource-subtract reses₁ reses₂)
  (for/fold ([reses : Resources reses₁]) ([(r n) (in-hash reses₂)])
    (count-up reses r (- n))))

(define init-state (State (hasheq 'ore 1) (hasheq)))

(: score : Blue-Print Integer → Integer)
(define (score bp steps)
  (define states
    (for/fold ([res₀ : (Listof State) (list init-state)]) ([i (in-range steps)])
      (printf "~a: ~a~n" i (length res₀))
      (for/fold ([res : (Listof State) '()]) ([s (in-list res₀)])
        (append (step bp s) res))))
  (for/fold ([best : Integer 0]) ([s (in-list states)])
    (match-define (State _ reses) s)
    (max best (resource-count reses 'geode))))

(define input : (Parameterof (HashTable Integer Blue-Print)) (make-parameter test-input))

(define (interact [bp : Blue-Print] [state : State] [minute : Integer]) : Void
  (define res (step bp state))
  (printf "Minute ~a: ~a~n" minute state)
  (printf "Steps for minute ~a:~n" (+ 1 minute))
  (for ([(s i) (in-indexed res)])
    (printf "    Choice ~a: ~a~n" i s))
  (printf "      ---> Your choice: ")
  (define i (assert (read) exact-integer?))
  (printf "~n")
  (interact bp (list-ref res i) (+ 1 minute)))

(define (q1)
  (parameterize ([input real-input])
    (for/sum : Integer ([(id bp) (in-hash (input))])
      (* id (score bp 24)))))

(define (q2)
  (parameterize ([input real-input])
    (for/product : Integer ([id (in-list '(1 2 3))])
      (score (hash-ref (input) id) 32))))

(module+ main
  (displayln (q1))
  (displayln (q2)))
